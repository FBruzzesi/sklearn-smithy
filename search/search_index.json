{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home \ud83c\udfe0","text":""},{"location":"#scikit-learn-smithy","title":"Scikit-learn Smithy","text":"<p>Scikit-learn smithy is a tool that helps you to forge scikit-learn compatible estimator with ease.</p> <p>How can you use it?</p> <ul> <li> Directly from the browser via our web UI (more info).  </li> <li> As a CLI (command line interface) in your terminal via the <code>smith forge</code> command (more info)</li> <li> As a TUI (terminal user interface) in your terminal via the <code>smith-tui</code> command (more info)</li> </ul> <p>Info</p> <p>All these tools will prompt a series of questions regarding the estimator you want to create, and then it will generate the boilerplate code for you.</p>"},{"location":"#supported-estimators","title":"Supported estimators","text":"<p>The following types of scikit-learn estimator are supported:</p> <ul> <li> Classifier</li> <li> Regressor</li> <li> Outlier Detector</li> <li> Clusterer</li> <li> Transformer<ul> <li> Feature Selector</li> </ul> </li> <li> Meta Estimator</li> </ul>"},{"location":"#origin-story","title":"Origin story","text":"<p>The idea for this tool originated from scikit-lego #660, which I cannot better explain than quoting the PR description itself:</p> <p>So the story goes as the following:</p> <ul> <li>The CI/CD fails for scikit-learn==1.5rc1 because of a change in the <code>check_estimator</code> internals</li> <li>In the scikit-learn issue I got a better picture of how to run test for compatible components</li> <li>In particular, rolling your own estimator suggests to use <code>parametrize_with_checks</code>, and of course I thought \"that is a great idea to avoid dealing manually with each test\"</li> <li>Say no more, I enter a rabbit hole to refactor all our tests - which would be fine</li> <li>Except that these tests failures helped me figure out a few missing parts in the codebase</li> </ul>"},{"location":"contribute/","title":"Contributing \ud83d\udc4f","text":""},{"location":"contribute/#guidelines","title":"Guidelines \ud83d\udca1","text":"<p>We welcome contributions to the library! If you have a bug fix or new feature that you would like to contribute, please follow the steps below:</p> <ol> <li>Check the existing issues and/or open a new one to discuss the problem and potential solutions.</li> <li>Fork the repository on GitHub.</li> <li>Clone the repository to your local machine.</li> <li>Create a new branch for your bug fix or feature.</li> <li>Make your changes and test them thoroughly, making sure that it passes all current tests.</li> <li>Commit your changes and push the branch to your fork.</li> <li>Open a pull request on the main repository.</li> </ol>"},{"location":"contribute/#submitting-pull-requests","title":"Submitting Pull Requests \ud83c\udfaf","text":"<p>When submitting a pull request, please make sure that you've followed the steps above and that your code has been thoroughly tested. Also, be sure to include a brief summary of the changes you've made and a reference to any issues that your pull request resolves.</p>"},{"location":"contribute/#code-formatting","title":"Code formatting \ud83d\ude80","text":"<p>sklearn-smithy uses ruff for both formatting and linting. Specific settings are declared in the pyproject.toml file.</p> <p>To format the code, you can run the following commands:</p> with Makewithout Make <pre><code>make lint\n</code></pre> <pre><code>ruff version\nruff format smithy tests\nruff check smithy tests --fix\nruff clean\n</code></pre> <p>As part of the checks on pull requests, it is checked whether the code follows those standards. To ensure that the standard is met, it is recommended to install pre-commit hooks:</p> <pre><code>python -m pip install pre-commit\npre-commit install\n</code></pre>"},{"location":"contribute/#developing","title":"Developing \ud83d\udc0d","text":"<p>Let's suppose that you already did steps 1-4 from the above list, now you should install the library and its developing dependencies  in editable way.</p> <pre><code>cd sklearn-smithy\npip install -e \".[streamlit]\" --no-cache-dir\npre-commit install\n</code></pre> <p>Now you are ready to proceed with all the changes you want to!</p>"},{"location":"contribute/#testing","title":"Testing \ud83e\uddea","text":"<p>Once you are done with changes, you should:</p> <ul> <li>add tests for the new features in the <code>/tests</code> folder</li> <li> <p>make sure that new features do not break existing codebase by running tests:</p> with Makewithout Make <pre><code>make test\n</code></pre> <pre><code>pytest tests -n auto\n</code></pre> </li> </ul>"},{"location":"contribute/#docs","title":"Docs \ud83d\udcd1","text":"<p>The documentation is generated using mkdocs-material, the API part uses mkdocstrings.</p> <p>If a new feature or a breaking change is developed, then we suggest to update documentation in the <code>/docs</code> folder as well, in order to describe how this can be used from a user perspective.</p>"},{"location":"installation/","title":"Installation \u2728","text":"<p>sklearn-smithy is available on pypi, so you can install it directly from there:</p> <pre><code>python -m pip install sklearn-smithy\n</code></pre> <p>Warning</p> <p>The minimum Python version required is 3.10.</p> <p>This will make the <code>smith</code> command available in your terminal, and you should be able to run the following:</p> <pre><code>smith version\n</code></pre> <p>sklearn-smithy=...</p>"},{"location":"installation/#extra-dependencies","title":"Extra dependencies","text":"<p>To run the TUI, you need to install the <code>textual</code> dependency as well:</p> <pre><code>python -m pip install \"sklearn-smithy[textual]\"\n</code></pre>"},{"location":"installation/#other-installation-methods","title":"Other installation methods","text":"pip + source/gitlocal clone <pre><code>python -m pip install git+https://github.com/FBruzzesi/sklearn-smithy.git\n</code></pre> <pre><code>git clone https://github.com/FBruzzesi/sklearn-smithy.git\ncd sklearn-smithy\npython -m pip install .\n</code></pre>"},{"location":"user-guide/","title":"User Guide \ud83d\udcda","text":"<p>As introduced in the home page, sklearn-smithy is a tool that helps you to forge scikit-learn compatible estimator with ease, and it comes in three flavours.</p> <p>Let's see how to use each one of them.</p>"},{"location":"user-guide/#web-ui","title":"Web UI \ud83c\udf10","text":"<p>TL;DR:</p> <ul> <li> Available at sklearn-smithy.streamlit.app</li> <li> It requires no installation.</li> <li> Powered by streamlit</li> </ul> <p>The web UI is the most user-friendly, low barrier way, to interact with the tool by accessing it directly from your browser, without any installation required.</p> <p>Once the estimator is forged, you can download the script with the code as a <code>.py</code> file, or you can copy the code directly from the browser.</p> Screenshot <p></p>"},{"location":"user-guide/#cli","title":"CLI \u2328\ufe0f","text":"<p>TL;DR:</p> <ul> <li> Available via the <code>smith forge</code> command.</li> <li> It requires installation: <code>python -m pip install sklearn-smithy</code></li> <li> Powered by typer.</li> </ul> <p>Once the library is installed, the <code>smith</code> CLI (Command Line Interface) will be available and that is the primary way to interact with the <code>smithy</code> package.</p> <p>The CLI provides a main command called <code>forge</code>, which will prompt a series of question in the terminal, based on which it will generate the code for the estimator.</p> <p>Non-interactive mode</p> <p>As for any CLI, in principle it would be possible to run it in a non-interactive way, however this is not fully supported yet and it comes with some risks and limitations.</p> <p>The reason for this is that the validation and the parameters interaction happen while prompting the questions one after the other, meaning that the input to one prompt will determine what follows next.</p>"},{"location":"user-guide/#smith-forge-example","title":"<code>smith forge</code> example","text":"<p>Let's see an example of how to use <code>smith forge</code> command:</p> <pre><code>$ &lt;font color=\"#4E9A06\"&gt;smith&lt;/font&gt; forge\n# \ud83d\udc0d How would you like to name the estimator?:$ MightyClassifier\n# \ud83c\udfaf Which kind of estimator is it? (classifier, outlier, regressor, transformer, cluster, feature-selector):$ classifier\n# \ud83d\udcdc Please list the required parameters (comma-separated) []:$ alpha,beta\n# \ud83d\udcd1 Please list the optional parameters (comma-separated) []:$ mu,sigma\n# \ud83d\udcf6 Does the `.fit()` method support `sample_weight`? [y/N]:$ y\n# \ud83d\udccf Is the estimator linear? [y/N]:$ N\n# \ud83c\udfb2 Should the estimator implement a `predict_proba` method? [y/N]:$ N\n# \u2753 Should the estimator implement a `decision_function` method? [y/N]:$ y\n# \ud83e\uddea We are almost there... Is there any tag you want to add? (comma-separated) []:$ binary_only,non_deterministic\n# \ud83d\udcc2 Where would you like to save the class? [mightyclassifier.py]:$ path/to/file.py\n&lt;span style=\"color: green; font-weight: bold;\"&gt;Template forged at path/to/file.py &lt;/span&gt;\n</code></pre> <p>Now the estimator template to be filled will be available at the specified path <code>path/to/file.py</code>.</p> <pre><code>$ cat path/to/file.py\nimport numpy as np\n\nfrom sklearn.base import BaseEstimator, ClassifierMixin\nfrom sklearn.utils import check_X_y\nfrom sklearn.utils.validation import check_is_fitted, check_array\n...\n</code></pre>"},{"location":"user-guide/#tui","title":"TUI \ud83d\udcbb","text":"<p>TL;DR:</p> <ul> <li> Available via the <code>smith-tui</code> command.</li> <li> It requires installing extra dependencies: <code>python -m pip install \"sklearn-smithy[textual]\"</code></li> <li> Powered by textual.</li> </ul> <p>If you like the CLI, but prefer a more interactive and graphical way from the comfort of your terminal, you can use the TUI (Terminal User Interface) provided by the <code>smith-tui</code> command.</p> Screenshot <pre><code>$ smith-tui\n</code></pre> <p></p>"},{"location":"why/","title":"Why\u2753","text":"<p>Writing scikit-learn compatible estimators might be harder than expected.</p> <p>While everyone knows about the <code>fit</code> and <code>predict</code>, there are other behaviours, methods and attributes that scikit-learn might be expecting from your estimator depending on:</p> <ul> <li>The type of estimator you're writing.</li> <li>The signature of the estimator.</li> <li>The signature of the <code>.fit(...)</code> method.</li> </ul> <p>Scikit-learn Smithy to the rescue: this tool aims to help you crafting your own estimator by asking a few questions about it, and then generating the boilerplate code.</p> <p>In this way you will be able to fully focus on the core implementation logic, and not on nitty-gritty details of the scikit-learn API.</p>"},{"location":"why/#sanity-check","title":"Sanity check","text":"<p>Once the core logic is implemented, the estimator should be ready to test against the somewhat official <code>parametrize_with_checks</code> pytest compatible decorator:</p> <pre><code>from sklearn.utils.estimator_checks import parametrize_with_checks\n\n@parametrize_with_checks([\n    YourAwesomeRegressor,\n    MoreAwesomeClassifier,\n    EvenMoreAwesomeTransformer,\n])\ndef test_sklearn_compatible_estimator(estimator, check):\n    check(estimator)\n</code></pre> <p>and it should be compatible with scikit-learn Pipeline, GridSearchCV, etc.</p>"},{"location":"why/#official-guide","title":"Official guide","text":"<p>Scikit-learn documentation on how to develop estimators.</p>"}]}